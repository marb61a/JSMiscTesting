Mocha
    - Mocha is a JavaScript-based testing framework running on NodeJS and browser
        - It is similar to TestNG framework for Java, and NUnit framework for C#
        - It is used to organize the tests and execute them in a logical sequence to make the testing more effective
        - It also makes the asynchronous testing to be simple and fun to execute

Prerequisites
    - NodeJS and NPM are needed to

Mocha
    - https://mochajs.org/
    - https://www.npmjs.com/package/mocha
    - To install Mocha use the following command
        - npm install mocha -g
    - To check that Mocha is installed use the following command
        - mocha -version
    - To run tests using just npm test change the test section in package.json
        - It should read -> "test": "mocha"
        - The file name needs to also be supplied

Functions Calls
    - A describe() function is a simple way to group tests in Mocha
        - In general, the describe() function takes 2 arguments
        - The first is the name or description of the test group and the second one is the callback function
        - This is a function that needs to be executed after another function has finished executing
    - The it() function is a way to describe the individual test cases
        - These tests should be nested within the describe() block
        - The it() should be described in a way that it makes sense for the given test case

Mocha Hooks
    - In general Mocha provides 4 hooks
        - before(), after(), beforeEach(), afterEach()
    - The before() hook will execute the code clock before the test executes from it() function
    - The after() hook will execute the code block after all the tests executes
    - The beforeEach() hook will run the code block before every test execution
    - The afterEach() hook will be running the code block after every text execution
    - !!!! The hooks should be present within the describe() block
        - If these hooks are not present inside the describe() block, none of the hooks will be executed during the test execution

Test Features
    - There are 3 types of test features available. First, exclusive. Second, inclusive and third, pending
    - Exclusive test feature allows us to execute only the specified test suite or a test case
        - This can be achieved by adding .only() function, and it can be added to both describe() and it() functions
    - Inclusive test is an inverse of the .only() function
        - This can be achieved by adding .skip()
        - This will tell Mocha to simply ignore these tests suites or test cases and is applicable for both pre-bundled functions, describe() and it()
        - When running tests the skipped test will list as pending
    - Pending tests are the ones that someone should write eventually
        - Pending tests will be included in the test results and marked as pending
        - A pending test is not considered as failed a test

Retry
    - Retry is a function available within Mocha to execute the failed test several times
    - It is configurable and can be used in case if you use End-to-End tests, like Selenium Scripts
    - Retry will not work with before() and after() hooks
        - It can be used in beforeEach() and afterEach() hooks
    - It is not recommended to use the retry in unit test
    - Timeout functionality is available as part of Mocha to explicitly tell Mocha for the timeouts
    - There are 3 levels where timeouts can be used. First is suite-level, Second is test-level and third is hook-level
        - Suite-level timeouts are used to throw out the test suites
        - Test-level timeouts are specific to the test case
        - Hook-level timeouts can be used in the hooks

Reporters
    - In general, Mocha reporters are mostly terminal based
    - There are different types of reporters available as part of Mocha, of which, spec and dot matrix are the commonly used reporter types
    - 
