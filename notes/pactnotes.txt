Intro To Contract Tests
    - https://docs.pact.io/

Contracts
    - Contracts can be thought of as a legally enforceable agreement
    - Contracts represent a set of interactions with expected requests and response structures
    - Often the term pact and contract can be used interchangably

What is a contract test 
    - A Contract Test verifies that a provider has fulfilled a contract expected by a consuming service and ensures that services can communicate with each other
    - Contract Tests are applicable anywhere where two services communicates with each other eg an API to a front-end 
    - Contract tests can have either a simple or complex structure
    - Often the provider of one flow can be the consumer of another, as is common in a microservices architecture

Providers and Consumers
    - Firstly what constitutes a provider and consumer
        - A provider is any party that provides a service for interactions with its dependents
        - A consumer is any party that interacts with a dependent service through an API

Broker
    - A broker is where contracts are stored
    - This can be any generic asset server but support for versioning is ideal
    - The pact-broker maybe a good solution as it is well-suited and is Open Source

Contract Test Hierarchy
    - Contract tests occupy the same space in the testing hierarchy as integration tests
    - Wherever the integrity of communications between services must be verified, an opportunity to create contract tests exists
    - !!! Do not confuse contract tests with component tests
        - Contract tests do not test the functional behavior of services, only whether or not inputs and outputs of service requests conform to an expected set of attributes

Contract Tests vs. Integration Tests
    - Integration tests require a complete runtime environment contract tests do not
    - Mock consumers and mock providers can be created to interact with real consumers and real providers, allowing tests to be run in isolation
    - Integration tests expose faults in interactions between integrated units
        - Contract tests however expose faults in communication messages between services
        - This improves system regression detection, alerting developers early to contract faults when changes are committed to providers or consumers alike
    - Contract tests also allow consumers to develop against API definitions before the provider API has formally completed development

Contract Tests vs. End-to-End API Tests
    - End-to-End functional testing will uncover discrepancies that appear in output data or the user interface
        - Contract tests will only check that API endpoint connections are active and functioning correctly
    - End-to-End tests are designed to be rigorous and complex which makes them time-intensive to execute
        - These tests tend to uncover significant defects that would otherwise go undetected
    - Contract testing, while limited in scope, is less intensive and can be performed more frequently
        - This provides a form of smoke test coverage each time code is deployed

Contract Tests vs Functional Tests
    - Contract testing focuses on the messages that flow between a consumer and a provider while functional testing ensures that the expected system behavior has occurred

Mocking Test Interfaces With Pact
    - Pact is a consumer-driven contract testing tool
        - This means that contracts are generated during the execution of consumer tests
    - The advantage of this pattern limits testing only to producer output that is actually used
    - This means that any provider behaviour that is not being used by current customers is free to change without breaking any tests
    - Pact manages the mocking of provider and consumer objects as well as contract definitions
    - The basic flow of interactions between real provider/consumer objects and Pact mock provider/consumer objects is as follows
        - Test Driven Development or TDD is used to write test code
        - Pact then produces a mocked response as if a real request was being made to a real server
        - Then a Pact JSON file is generated
    - When a test is triggered on the provider side, the Pact JSON file is loaded
        - A verification process then determines whether or not the contract matches what a consumer is expecting
        - Pact generates this contract file in accordance with consumer expectations and will be used to match what the real provider server is actually sending

Languages Supported
    - Pact supports several different languages including
    - Providers and consumers can be written in different languages
        - JVM languages, .NET, JavaScript, Ruby, PHP, Go, Python and Swift

Contract Testing 
    - Contract testing is best used in conjunction with other types of testing to improve the overall quality of an application release
    - Contract tests can be used to detect defects within consumer workflows, end point configuration miscommunications or paylod changes that are not expected
    
Installing Pact
    - To install Pact from the command line use the following command
        - npm install --save-dev @pact-foundation/pact

Pact 
    - Pact popularity is in part because its support for service integration testing without the need to create mocks or stubs
        - Pact creates all of the infrastructure and reuses the same functions that the consumer uses to create contracts
        - Representative, real-world testing is possible while eliminating liabilities such as unreliable internet connectivity and mocking infrastructure maintenance
        - Pact integrates services by creating its contract and mocks around existing functions

!!! Running Provider service
    - The scripts section of package.json can be adjusted to run services so that the following command works
        - npm run provider

!!! Logging
    - Logging paths will automatically be created on test execution

!!! Spec
    - spec -> is a specification of Pact for other languages and is part of the contract structure
        - JVM uses a value of 3 whereas all other languages use 2

!!! Overwriting
    - A value of “overwrite” for pactfileWriteMode will overwrite and truncate existing Pact files on each test execution
        - A value of "updated" will append to a Pact file
