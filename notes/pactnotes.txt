Intro To Contract Tests
    - https://docs.pact.io/

Contracts
    - Contracts can be thought of as a legally enforceable agreement
    - Contracts represent a set of interactions with expected requests and response structures
    - Often the term pact and contract can be used interchangably

What is a contract test 
    - A Contract Test verifies that a provider has fulfilled a contract expected by a consuming service and ensures that services can communicate with each other
    - Contract Tests are applicable anywhere where two services communicates with each other eg an API to a front-end 
    - Contract tests can have either a simple or complex structure
    - Often the provider of one flow can be the consumer of another, as is common in a microservices architecture

Providers and Consumers
    - Firstly what constitutes a provider and consumer
        - A provider is any party that provides a service for interactions with its dependents
        - A consumer is any party that interacts with a dependent service through an API

Broker
    - A broker is where contracts are stored
    - This can be any generic asset server but support for versioning is ideal
    - The pact-broker maybe a good solution as it is well-suited and is Open Source

Contract Test Hierarchy
    - Contract tests occupy the same space in the testing hierarchy as integration tests
    - Wherever the integrity of communications between services must be verified, an opportunity to create contract tests exists
    - !!! Do not confuse contract tests with component tests
        - Contract tests do not test the functional behavior of services, only whether or not inputs and outputs of service requests conform to an expected set of attributes

Contract Tests vs. Integration Tests
    - Integration tests require a complete runtime environment contract tests do not
    - Mock consumers and mock providers can be created to interact with real consumers and real providers, allowing tests to be run in isolation
    - Integration tests expose faults in interactions between integrated units
        - Contract tests however expose faults in communication messages between services
        - This improves system regression detection, alerting developers early to contract faults when changes are committed to providers or consumers alike
    - Contract tests also allow consumers to develop against API definitions before the provider API has formally completed development

Contract Tests vs. End-to-End API Tests
    - End-to-End functional testing will uncover discrepancies that appear in output data or the user interface
        - Contract tests will only check that API endpoint connections are active and functioning correctly
    - End-to-End tests are designed to be rigorous and complex which makes them time-intensive to execute
        - These tests tend to uncover significant defects that would otherwise go undetected
    - Contract testing, while limited in scope, is less intensive and can be performed more frequently
        - This provides a form of smoke test coverage each time code is deployed

Contract Tests vs Functional Tests
