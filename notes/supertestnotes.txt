SuperTest
    - Super-agent driven library for testing node.js HTTP servers using a fluent API.
    - https://github.com/visionmedia/supertest
    - https://www.npmjs.com/package/supertest
        - npm i supertest

Mocky
    - Usually, when testing APIs, there will be hitting a HTTP server, and the API will be hosted there
    - There is a site called Mocky which allows for testing purposes the setting up of a response
        - This will then generate a HTTP response
        - https://designer.mocky.io/design

GET requests
    - GET requests have a couple of different parameters - route parameters and query parameters
    - Route Parameters
        - Route parameters come in the URL themselves
        - These can be an ID or a specific name of something being queried etc
        - Route parameters are named URL segments that are used to capture the values specified at their position in the URL
            - https://expressjs.com/en/guide/routing.html
    - Query Parameters
        - A query string is a part of a URL) that assigns values to specified parameters
        - https://en.wikipedia.org/wiki/Query_string
        - Query parameters are a defined set of parameters attached to the end of a url
            - They are extensions of the URL that are used to help define specific content or actions based on the data being passed
            - To append query params to the end of a URL, a ‘?’ Is added followed immediately by a query parameter
            - https://branch.io/glossary/query-parameters/

!! Done in the test callback seems to be creating an issue
    - Test fails if included, passes without?

POST requests
    - The HTTP POST method sends data to the server
    - The type of the body of the request is indicated by the Content-Type header
        - In the JSON reponse it is the application/json
        - In the form case it is the application/x-www-form-urlencoded
    - There are a couple of different ways to interact with POST requests
        - That of the typical API which returns a JSON response and takes a JSON request
        - That which submits a form, which will be passed as a URL form
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

API responses
    - Using SuperTest, there are a couple of different formats that can be used for the response, such as the text and the JSON object
    - Also the status code can be asserted directly from the response
    - Because the body is directly passed using SuperTest there is need to worry about converting the object into the format desired
    - In JSON response there is no need to worry about the structure of the object
    - It may be better to have a status OK response rather than having to know the HTTP codes

Nock
    - Nock is used for mocking API
        - https://github.com/nock/nock
        - It can be used to test modules that perform HTTP requests in isolation
    - before, beforeEach, after and afterEach are hooks to be used with Mocha along with SuperTest
    - The response object passed to Nock can be passed in a few different ways  
        - One of the ways is the JSON object
        - A string can also be used
    - Nock can be used to test multiple requests or multiple scenarios
        - However there is a need to set up Nock with multiple iterations of the mock
        - This is because once the request has been intercepted once, it will be removed from the list and therefore won't be able to be used again
        - To change the option of the interceptor in order to make sure that it's returned multiple times
        - This can twice() or thrice() below the GET request

Axios
    - Using Nock to intercept an Axios call, which is embedded within a React app
        - Axios is a Promise based HTTP client for the browser and node.js
        - https://github.com/axios/axios
    