Cucumber
    - BDD stands for behavior-driven development, and it's an example-based method for developing software
    - It includes many different collaborative activities and techniques performed by stakeholders, namely the product owner, the tester, and the developer
        - These are often referred to as the 3 amigos
    - One of the major activities is having the Three Amigos meet to discuss and document examples of how a system should act and be used
        - These examples describe how the software is intended to behave, often illustrating a particular business rule or requirement
        - These examples do not outline how a system, or its features should be implemented, only how it should behave
    - The end result of discussing and documenting these examples is that all parties should come to a mutual understanding of how the system should work
    - An important point to note is that BDD is not solely a testing technique
        - Like test-driven development, it's a process of approaching a design and forcing thinking about desired outcomes prior to coding 
    - The major goals of BDD are to narrow the communication gaps among team members
        - Foster a better understanding of the customer's needs
        - Promote continuous communication throughout the software development process
    - From the very beginning to the end BDD involves the collaboration of all team members to get an understanding of the needs of a system
    - This continuous collaboration has several benefits
        - The entire team is speaking the same domain language
        - Silos are being broken down
        - There is a much better shared understanding of what will need to be done
        - Examples that are generated from team meetings can as executable artifacts that drive test automation
    - An example is a description of how the software is intended to behave, often illustrating a particular business rule or requirement.
    - Gherkin is a special syntax that should be used when developing examples
        - It is designed in a way for anyone to understand the behavior of a feature

Gherkin
    - Gherkin is a special syntax that is used within BDD to document examples
    - Gherkin uses a set of special keywords to give structure and meaning to executable specifications
        - The files that are used to store Gherkin are referred to as feature files because each file is usually used to document the behavior for one feature
        - Each group of instructions that relate to the actions and behavior of an individual scenario of a feature is actually referred to as an example or a scenario
    - Some of the core keywords of Gherkin are: Feature, Scenario, Example, Given, When, and Then
    - In a standard layout each line starts with a keyword followed by some descriptive text
        - Start with the Feature keyword whose descriptive text outlines the feature, it's expected behavior, and how it relates to a business requirement
        - Then there is a Scenario keyword whose descriptive text outlines the specific business situation related to the feature
        - Following these then there is Given, When, and Then — the cornerstone of Gherkin scenarios
        - Each line in an example that begins with Given, When, or Then is called a Step
            - These are responsible for explaining the state of a system or linking an action and the expected behavior
    - Gherkin is written in English like statements making it easy for anyone to understand
    - Some of the keywords and usage are
        - Given —> used to outline some preconditions that are necessary for this scenario to be executed by a user
        - When —> used to describe the action to be performed
        - Then —> used to describe the outcome from the action
        - And or But —> these can be used to duplicate any previous keyword
        - Using And, and But can make a scenario easier to read
    - Scenario Outline — this is useful when you want to run the same scenario with different values
        - It is used in conjunction with the Examples keyword
    - Examples — also referred to as data tables, are used to outline the values to be used within a Scenario Outline
        - These are represented in a table format
    - Gherkin Best Practices
        - Create modular, reusable steps, and actually reuse them
            - Do not create a step to withdraw a specific amount of money, it should be any amount of money
            - One of the most common mistakes people make is to create Gherkin steps that are too detailed and not reusable. 
        - Create behavior-driven steps, not procedural
            - Write steps as if being written by a user and avoid steps referring to specific elements or selectors
            - This is a part of the process of Gherkin steps being developed by the 3 Amigos
        - Each scenario should represent one behaviour
            - When creating steps for a Scenario, try to limit the scope of it to 1 behavior for that feature
        - Utilized Backgrounds and Scenario Outlines as much as possible
            - You can utilize these keywords as they can help to make your feature files more concise
        - Avoid excessive use of And and But
            - If 3 consecutive And's or But's are used it shows an issue
            - The tester may be trying to create steps that are not reusable or steps that are too tightly coupled with the UI
        - Try not to use punctuation, specifically periods and commas, within step phrases
            - These may become problematic when trying to debug issues
    - Given, When, and Then steps must appear in order
        - A Given may not follow a When or Then and a When may not follow a Then

Cucumber
    - Cucumber is a tool that supports BDD and is used to execute Gherkin statements
    - Cucumber works in a few steps
        - Cucumber reads each line of a Gherkin document
        - It validates that the statements conform to Gherkin syntax
        - Then it maps each Gherkin statement to some predefined logic
        - The final step is the execution of the logic
    - Cucumber Pros and Cons
        - The first benefit, which is also an extension from BDD, is tests are understood by the entire team
        - Another benefit is Cucumber allows for continued collaboration and increases the visibility among the entire team.
        - Cucumber also allows for a test to be refactored easily without changing the actual Gherkin statements
        - A big con of Cucumber are the extra layers of abstraction which can add time and effort to create and maintain a test automation project
        - Another con is that the use of Cucumber can lead to frustration, if not used with correct BDD and Gherkin and practices
        - People tend to adopt tools over processes so if Cucumber is implemented badly it can create team difficulties and waste money
    - Deciding whether to use or not
        - Cucumber should not be used solely as an automation tool
        - If using Cucumber then use from the beginning as going into a project knowing that it will be used is better then introducing it later
        - There should be people on the team familiar with Cucumber & BDD and can train others
        - Will the team benefit as Cucumber may not be as beneficial for a very short project or for a project with 2 or 2 people or in startup environments

!! - To create a wdio file
    - ./node_modules/.bin/wdio config
    - This will create an interactive menu where selections will be used to generate  the wdio config file

!! - Warnings
    - Warnings can be disabled in the wdio.conf.js file
    - This is done by changing the property, ignoreUndefinedDefinitions to true
    - These warnings can be helpful and maybe better switched on

!! - Although the default entry for feature files is to have a features directory in project root
    - This may not be the best practice for maintainability
    - Feature files may be better off in sub-folders each file reflecting a single component

!! - Step definitions
    - WebDriverIO expects to find Step Definitions in a specific location
    - The config options for Step Definitions are found in the cucumberOpts section of wdio.conf.js
    - The first property here is require which is used to load files that are needed before executing any Feature Files
    - It maybe an idea to do as the feature files and separate into sub-folders

!! - Duplicate steps
    - Backgrounds are what can be used to repeat a series of steps for scenarios
    - This is done using the background keyword 

!! - Regular expressions
    - Regular expressions are very good to know for testers and developers
    - Using regex can be extremely powerful when used correctly

Using the WDIO Cucumber Framework module installed by WebDriverIO
    - That also installed a Cucumber module that gives some helper methods
    - The Given step (Using Given in a file)
        - Given will need to be imported into the file at the start 
        - The Given function is a function that requires 2 parameters
        - The first is a string or regex and the second is a function
        - If the base url is already in the config file then calling it is just using a backslash parameter in the global browser 
    - The When Step
        - Again will need to be imported from Cucumber
        - The first step can again be a regex or string
        - Using a regex will allow for much greater reusability
            - It will mean that any matching word\phrase can be used
            - The use of quotations is not necessarily mandatory, but it makes the statement easier to read 
        - This is probably the trickiest part of Cucumber, crafting regular expressions to match our steps and make them reusable
    - The Then step
        - Again Then will need to be imported
        - Using $$ is shorthand for telling WebDriverIO to find all matching elements

Support Files
    - This is where to put general reusable functions, typically actions and assertions
    - Unlike the Feature Files and Step definitions, WebdriverIO doesn't necessarily need to know where these files are located

Pulling Data from Tables
    - This is done in the feature file using angle brackets and must match headers on example
    - EG Examples with menuOption header would be "<menuOption>" in the scenario

Tags
    - Tags are an easy way to group tests, Features, or Scenarios in Cucumber
    - It allows for grouping Features, Scenarios, and even Examples, so we can run them together, individually, or not at all
    - The way to create tags in Cucumber is by simply putting an @ sign, followed by the tag name
    - Using tags will need to be recognised in the wdio.conf.js file 
    - If using tags then it maybe better to replace the tags entry with tagsExpression in the cucumberOpts section
    
