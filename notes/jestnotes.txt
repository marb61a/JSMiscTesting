Jest
    - https://jestjs.io/
    - Jest is an open sourced JavaScript testing library from Facebook
    - Jest is not just a test-runner, it is a complete testing framework that has brought modern testing to another level
    - Jest is very easy to setup
    - It is also extremely fast during test execution
        - This is because of a combination of several factors, including parallelization and running slowest test first
        - This will ensure that all machine cores are utilised as much as possible
    - Jest also does Snapshot testing
    - It also comes with built-in matchers, spies and its own extensive mocking library

When To Use Jest
    - Jest can be used for Unit Testing
    - It can be used for API testing with other Javascript libraries like superTest or request-promise
    - Along with Puppeteer Jest can be used to perform UI testing 
    - Modern databases including NoSQL databases suchas MongoDB can be tested

Installing Jest
    - Node and NPM are pre-requisites
    - To install and add to dev-dependencies
        - npm install --save-dev jest
    - Change package.json to run test easier
        - In scripts section change to "test": "jest"
        - To run then is simply ->  npm run test 

!!! Jest Naming convention
    - Jest reads all files named with the ".test" or ".spec."

Matchers
    - Matchers are methods that let you test your values
    - Usually a matcher is used in conjunction with an .expect
    - The 2 most common matchers are toBe and toEqual
        - toBe tests for strict equality
        - toEqual tests the value of an object
    - Another common matcher is not and can be used with the 2 above

String Matchers
    - You can easily test for certain String values by using regular expressions using the .toMatch matcher
    - This can test for a certain word being contained in a larger word or sentence

Number Matchers
    - There are several different number matchers available
    - Some include .toBeGreaterThan. ,  .toBeLessThan. , .toBeLessThanOrEqual

Truthiness Matchers
    - Often there is a need to test some less than conventional values ie null, undefined, true or false execution
    - If something is said to be Truthy, then it is considered true if the value is considered true
    - Some matchers include toBeDefined(), toBeNull(), toBeTruthy() and toBeFalsy()
    - !!! null is considered as a false value

Array Matcherss
    - This can test to see whether an array holds a certain value
    - Probably the most important array matcher is toContain()

Before And After Code
    - This can be referred to as setup and teardown features
    - Usually when writing tests work is needed both before and after tests are run
    - The helper functions Jest provides to do this are
        - beforeEach(), afterEach(), beforeAll() and afterAll()
        - If there is work needed repeatedly before many tests you can use beforeEach()
        - If there is work needed repeatedly after the test, you can use afterEach()
    - In some instances there is only a need to setup once at test beginning and once at at the end pf test completion
        - In this case use beforeAll() and afterAll() 

Running Specific tests
    - In Jest, you can choose to run tests in many different ways
        - All tests can be ran in a project, specific test files, a single test in a file amd run tests in watch mode
    - To run a single test file
        - npm run test <file_name>
    - Running Specific Tests Within a File
        - This is done by adding the word only to a test i.e. test.only
        - This will only run the single test even though there may be several in the file
    - Running in Watch Mode
        - This is done by adding an entry to the scripts section in package.json
        - "test:watch": "jest --watchAll"
        - Run npm run test:watch
        - When this runs a hidden menu appears which gives many more options appears
            - These options can be very useful eg only run failed tests 

Async Testing in Jest
    - Asynchronous code in JavaScript can be tough to understand
        - It is important to understand and the conceps are not as daunting as firstly might appear
    - It is common in JavaScript to run asynchronously
    - When there is async code Jest needs to know when the code it is testing has completed before it can move on
    - Jest has 3 different ways to handle async code
        -  Async/await, callbacks, promises
    - Async/await is the now preferred way over the other 2 methods

Snapshot Testing
    - Jest docs state that snapshots are a great new way of testing UI components
    - Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly
        - If performing a UI test and a snapshot is taken this should match a reference snapshot stored alongside the test
        - The test will fail if the snapshots do not match so will need to be either changed if the UI has changed or the error fixed
    - Snapshot tests are not limited to solely UI testing
    - Snapshots are created using the .toMatchSnapshot() method
        - This will generate a _snapshots_ directory and a snapshot file inside
        - The file should hold values similar to what would be there had an assertion been used instead

!!! Running specific tests
    - There may be a test failure if using tab to complete file paths
        -  npm run test .\snapshots.test.js         -> fails
        -  npm run test snapshots.test.js           -> passes
        